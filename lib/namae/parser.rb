#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'singleton'
require 'strscan'

module Namae
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 84)

  include Singleton
    
  attr_reader :options
  
  def initialize
    @input, @options = StringScanner.new(''), {
      :debug => false,
      :comma => ',',
      :separator => /\s+(?:and|&)\s+/i
    }
  end
  
  def debug?
    options[:debug] || ENV['DEBUG']
  end
  
  def separator
    options[:separator]
  end
  
  def comma
    options[:comma]
  end
  
  def parse(input)
    parse!(input)
  rescue => e
    warn e.message if debug?
    []
  end
  
  def parse!(string)
    @yydebug = debug?
    input.string = string.strip
    do_parse
  end
    
  private
  
  def next_token
    case
    when input.nil?, input.eos?
      nil
    when input.scan(separator)
      [:AND, nil]
    when input.scan(/\s*,\s*/)
      [:COMMA, nil]
    when input.scan(/\s+/)
      next_token
    when input.scan(/\p{Upper}[^\s#{comma}]*/)
      [:UWORD, input.matched]
    when input.scan(/\p{Lower}[^\s#{comma}]*/)
      [:LWORD, input.matched]
    when input.scan(/('[^'\n]+')|("[^"\n]+")/)
      [:NICK, input.matched[1...-1]]
    else
      raise ArgumentError,
        "Failed to parse name #{input.string.inspect}: unmatched data at offset #{input.pos}"
    end
  end
  
  def match_word(word)
  end
  
  def on_error(tid, value, stack)
    raise ArgumentError,
      "Failed to parse name: unexpected '#{value}' at #{stack.inspect}"
  end
    
  attr_reader :input

# -*- racc -*-
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    11,   -16,   -30,   -16,   -29,   -16,   -28,    12,   -16,   -30,
   -16,   -29,   -28,   -28,   -16,     9,    16,    10,    14,   -28,
    21,    28,    22,     9,     7,    10,    38,    37,    39,    21,
    19,    22,    38,    37,    39,    38,    37,    39,    21,    19,
    22,    21,    32,    22,    38,    37,    39,    21,    19,    22,
     9,     7,    10,    21,    41,    22,    38,    37,    39,    43,
    24,    23,    31 ]

racc_action_check = [
     1,    28,    10,    19,     9,    19,    16,     1,    28,    10,
    19,     9,     7,    16,     7,     4,     4,     4,     4,     7,
    14,    14,    14,    12,    12,    12,    36,    36,    36,    15,
    15,    15,    41,    41,    41,    31,    31,    31,     5,     5,
     5,    20,    20,    20,    23,    23,    23,    27,    27,    27,
     0,     0,     0,    29,    30,    29,    43,    43,    43,    34,
    11,     6,    18 ]

racc_action_pointer = [
    47,     0,   nil,   nil,    12,    35,    59,    12,   nil,     4,
     2,    60,    20,   nil,    17,    26,     6,   nil,    60,     3,
    38,   nil,   nil,    41,   nil,   nil,   nil,    44,     1,    50,
    52,    32,   nil,   nil,    57,   nil,    23,   nil,   nil,   nil,
   nil,    29,   nil,    53,   nil,   nil,   nil ]

racc_action_default = [
    -1,   -31,    -2,    -4,   -17,   -31,   -31,   -13,   -20,   -22,
   -23,   -31,   -31,    -5,   -31,   -31,   -13,   -21,    -9,   -14,
   -17,   -22,   -23,   -26,    47,    -3,    -6,   -31,   -13,   -17,
    -8,   -26,   -15,   -10,   -18,   -24,   -27,   -28,   -29,   -30,
    -7,   -26,   -11,   -26,   -25,   -12,   -19 ]

racc_goto_table = [
     3,    17,    33,    15,    13,    18,     2,     4,    46,     1,
    42,   nil,     3,    27,    26,    30,   nil,    17,    25,     4,
    45,    29,   nil,   nil,   nil,   nil,    17,    40,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    44 ]

racc_goto_check = [
     3,     9,     7,     6,     3,     5,     2,     4,     8,     1,
     7,   nil,     3,     6,     5,     5,   nil,     9,     2,     4,
     7,     4,   nil,   nil,   nil,   nil,     9,     5,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,     9,     6,     0,     7,     0,    -1,   -21,   -35,    -3,
   nil ]

racc_goto_default = [
   nil,   nil,   nil,    35,    20,     6,     5,   nil,    34,     8,
    36 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 9, :_reduce_1,
  1, 9, :_reduce_2,
  3, 9, :_reduce_3,
  1, 10, :_reduce_4,
  2, 10, :_reduce_5,
  3, 10, :_reduce_6,
  4, 10, :_reduce_7,
  3, 10, :_reduce_8,
  2, 10, :_reduce_9,
  3, 10, :_reduce_10,
  4, 10, :_reduce_11,
  5, 10, :_reduce_12,
  1, 14, :_reduce_none,
  2, 14, :_reduce_14,
  3, 14, :_reduce_15,
  1, 13, :_reduce_none,
  1, 13, :_reduce_none,
  1, 15, :_reduce_18,
  3, 15, :_reduce_19,
  1, 12, :_reduce_none,
  2, 12, :_reduce_21,
  1, 17, :_reduce_none,
  1, 17, :_reduce_none,
  1, 18, :_reduce_none,
  2, 18, :_reduce_25,
  0, 16, :_reduce_none,
  1, 16, :_reduce_none,
  1, 11, :_reduce_none,
  1, 11, :_reduce_none,
  1, 11, :_reduce_none ]

racc_reduce_n = 31

racc_shift_n = 47

racc_token_table = {
  false => 0,
  :error => 1,
  :COMMA => 2,
  :UWORD => 3,
  :LWORD => 4,
  :PWORD => 5,
  :NICK => 6,
  :AND => 7 }

racc_nt_base = 8

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "COMMA",
  "UWORD",
  "LWORD",
  "PWORD",
  "NICK",
  "AND",
  "$start",
  "names",
  "name",
  "word",
  "u_words",
  "last",
  "von",
  "first",
  "opt_words",
  "u_word",
  "words" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_1(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 12)
  def _reduce_3(val, _values, result)
     result << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 16)
  def _reduce_4(val, _values, result)
             result = Name.new(:given => val[0])
       
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_5(val, _values, result)
             result = Name.new(:given => val[0], :family => val[1])
       
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_6(val, _values, result)
             result = Name.new(:given => val[0], :nick => val[1], :family => val[2])
       
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_7(val, _values, result)
             result = Name.new(:given => val[0], :nick => val[1],
           :particle => val[2], :family => val[3])
       
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 33)
  def _reduce_8(val, _values, result)
             result = Name.new(:given => val[0], :particle => val[1], :family => val[2])
       
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_9(val, _values, result)
             result = Name.new(:particle => val[0], :family => val[1])
       
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 41)
  def _reduce_10(val, _values, result)
             result = Name.new(:family => val[0], :suffix => val[2][0],
           :given => val[2][1])
       
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 46)
  def _reduce_11(val, _values, result)
             result = Name.new(:particle => val[0], :family => val[1],
           :suffix => val[3][0], :given => val[3][1])
       
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 51)
  def _reduce_12(val, _values, result)
             result = Name.new(:particle => val[0,2].join(' '), :family => val[2],
           :suffix => val[4][0], :given => val[4][1])
       
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_14(val, _values, result)
     result = val.join(' ') 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_15(val, _values, result)
     result = val.join(' ') 
    result
  end
.,.,

# reduce 16 omitted

# reduce 17 omitted

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_18(val, _values, result)
     result = [nil,val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_19(val, _values, result)
     result = [val[0],val[2]] 
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_21(val, _values, result)
     result = val.join(' ') 
    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.y', 71)
  def _reduce_25(val, _values, result)
     result = val.join(' ') 
    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Namae
