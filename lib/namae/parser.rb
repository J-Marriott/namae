#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'singleton'
require 'strscan'

module Namae
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 76)

  include Singleton
    
  attr_reader :options
  
  def initialize
    @input, @options = StringScanner.new(''), {
      :debug => false,
      :separator => /\s+(?:and|&)\s+/i
    }
  end
  
  def debug?
    options[:debug] || ENV['DEBUG']
  end
  
  def separator
    options[:separator]
  end
  
  def parse(input)
    parse!(input)
  rescue => e
    warn e.message if debug?
    []
  end
  
  def parse!(string)
    @yydebug = debug?
    input.string = string
    do_parse
  end
    
  private
  
  def next_token
    case
    when input.nil?, input.eos?
      nil
    when input.scan(separator)
      [:AND, nil]
    when input.scan(/\s*,\s*/)
      [:COMMA, nil]
    when input.scan(/\w+/)
      [:PWORD, input.matched]
    else
      raise ArgumentError,
        "Failed to parse name #{input.string.inspect}: unmatched data at offset #{input.pos}"
    end
  end
  
  def on_error(tid, value, stack)
    raise ArgumentError,
      "Failed to parse name: unexpected '#{value}' at #{stack.inspect}"
  end
    
  attr_reader :input

# -*- racc -*-
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
   -26,    11,   -14,   -28,   -14,   -27,   -26,    12,   -14,   -28,
   -26,   -27,   -14,     9,     7,    10,   -26,    20,    18,    21,
    33,    32,    34,     9,     7,    10,    20,    18,    21,    33,
    32,    34,    33,    32,    34,     9,    15,    10,    33,    32,
    34,    33,    32,    34,    20,    27,    21,    35,    37,    26,
    22,    23 ]

racc_action_check = [
    15,     1,    18,    10,    18,     9,    15,     1,    18,    10,
     7,     9,     7,     0,     0,     0,     7,     5,     5,     5,
    37,    37,    37,    12,    12,    12,    14,    14,    14,    35,
    35,    35,    31,    31,    31,     4,     4,     4,    26,    26,
    26,    22,    22,    22,    19,    19,    19,    25,    29,    17,
     6,    11 ]

racc_action_pointer = [
    10,     1,   nil,   nil,    32,    14,    48,    10,   nil,     5,
     3,    51,    20,   nil,    23,     0,   nil,    47,     2,    41,
   nil,   nil,    38,   nil,   nil,    45,    35,   nil,   nil,    46,
   nil,    29,   nil,   nil,   nil,    26,   nil,    17,   nil,   nil,
   nil ]

racc_action_default = [
    -1,   -29,    -2,    -4,   -15,   -29,   -29,   -11,   -18,   -20,
   -21,   -29,   -29,    -5,   -29,   -11,   -19,    -7,   -12,   -15,
   -20,   -21,   -24,    41,    -3,    -6,   -24,   -13,    -8,   -16,
   -22,   -25,   -26,   -27,   -28,   -24,    -9,   -24,   -23,   -10,
   -17 ]

racc_goto_table = [
     3,    16,    28,    14,    13,     2,    36,    40,     1,    19,
    17,   nil,     3,   nil,   nil,    39,    16,    24,    19,    25,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    38 ]

racc_goto_check = [
     3,     9,     7,     5,     3,     2,     7,     8,     1,     4,
     6,   nil,     3,   nil,   nil,     7,     9,     2,     4,     6,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     3 ]

racc_goto_pointer = [
   nil,     8,     5,     0,     4,    -1,     5,   -20,   -30,    -3,
   nil ]

racc_goto_default = [
   nil,   nil,   nil,    30,     4,     5,     6,   nil,    29,     8,
    31 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 8, :_reduce_1,
  1, 8, :_reduce_2,
  3, 8, :_reduce_3,
  1, 9, :_reduce_4,
  2, 9, :_reduce_5,
  3, 9, :_reduce_6,
  2, 9, :_reduce_7,
  3, 9, :_reduce_8,
  4, 9, :_reduce_9,
  5, 9, :_reduce_10,
  1, 12, :_reduce_none,
  2, 12, :_reduce_12,
  3, 12, :_reduce_13,
  1, 13, :_reduce_none,
  1, 13, :_reduce_none,
  1, 14, :_reduce_16,
  3, 14, :_reduce_17,
  1, 11, :_reduce_none,
  2, 11, :_reduce_19,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  1, 17, :_reduce_none,
  2, 17, :_reduce_23,
  0, 15, :_reduce_none,
  1, 15, :_reduce_none,
  1, 10, :_reduce_none,
  1, 10, :_reduce_none,
  1, 10, :_reduce_none ]

racc_reduce_n = 29

racc_shift_n = 41

racc_token_table = {
  false => 0,
  :error => 1,
  :COMMA => 2,
  :UWORD => 3,
  :LWORD => 4,
  :PWORD => 5,
  :AND => 6 }

racc_nt_base = 7

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "COMMA",
  "UWORD",
  "LWORD",
  "PWORD",
  "AND",
  "$start",
  "names",
  "name",
  "word",
  "u_words",
  "von",
  "last",
  "first",
  "opt_words",
  "u_word",
  "words" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_1(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 12)
  def _reduce_3(val, _values, result)
     result << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 16)
  def _reduce_4(val, _values, result)
             result = Name.new(:given => val[0])
       
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_5(val, _values, result)
             result = Name.new(:given => val[0], :family => val[1])
       
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_6(val, _values, result)
             result = Name.new(:given => val[0], :particle => val[1],
           :family => val[2])
       
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_7(val, _values, result)
             result = Name.new(:particle => val[0], :family => val[1])
       
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 33)
  def _reduce_8(val, _values, result)
             result = Name.new(:family => val[0], :suffix => val[2][0],
           :given => val[2][1])
       
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_9(val, _values, result)
             result = Name.new(:particle => val[0], :family => val[1],
           :suffix => val[3][0], :given => val[3][1])
       
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_10(val, _values, result)
             result = Name.new(:particle => val[0,2].join(' '), :family => val[2],
           :suffix => val[4][0], :given => val[4][1])
       
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_12(val, _values, result)
     result = val.join(' ') 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 50)
  def _reduce_13(val, _values, result)
     result = val.join(' ') 
    result
  end
.,.,

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_16(val, _values, result)
     result = [nil,val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_17(val, _values, result)
     result = [val[0],val[2]] 
    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_19(val, _values, result)
     result = val.join(' ') 
    result
  end
.,.,

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_23(val, _values, result)
     result = val.join(' ') 
    result
  end
.,.,

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Namae
